<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datastructure on TOM&#39;s zone</title>
    <link>https://hasaki.xyz/tags/datastructure/</link>
    <description>Recent content in Datastructure on TOM&#39;s zone</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH-CN</language>
    <copyright>Early 2016 ~ 2019 &amp;copy; TOM&#39;s Zone</copyright>
    <lastBuildDate>Wed, 23 May 2018 12:33:21 +0800</lastBuildDate>
    
	<atom:link href="https://hasaki.xyz/tags/datastructure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>learn Data Structure</title>
      <link>https://hasaki.xyz/blog/datastructure/</link>
      <pubDate>Wed, 23 May 2018 12:33:21 +0800</pubDate>
      
      <guid>https://hasaki.xyz/blog/datastructure/</guid>
      <description>List list 是n(n≥0)个相同类型的数据元素构成的有限序列。
ADT List { Data: Operation: InitList(&amp;amp;L) CreateList(&amp;amp;L) ListEmpty(L) ListLength(L) LocateElem(L,e) PriorElem(L,cur_e,&amp;amp;pre_e) NextElem(L,cur_e,&amp;amp;pre_e) ListInsert(&amp;amp;L,i,e) ListDelete(&amp;amp;L,i,&amp;amp;e) GetElem(L,i,&amp;amp;e) ListTraverse(L) DestroyList(&amp;amp;L) }//ADT List  list 简单实现 /** * List Structure */ class List { /** * 顺序表初始化操作，申请使用内存 * @constructor */ InitList() { this.list = []; } /** * 判断顺序表是否为空 * @returns {boolean} * @constructor */ ListEmpty() { return this.list.length === 0; } /** * 顺序表求表长操作 * @returns {number} * @constructor */ ListLength() { return this.</description>
    </item>
    
  </channel>
</rss>